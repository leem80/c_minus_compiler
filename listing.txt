   1:/*sdfsdfsdfsdf*/
   2:int gcd(int u,int v)
	2:reserved word:int
	2:ID,name=gcd
	2:(
	2:reserved word:int
	2:ID,name=u
	2:,
	2:reserved word:int
	2:ID,name=v
	2:)
   3:{
	3:{
   4:    if(v==0)    return u;
	4:reserved word:if
	4:(
	4:ID,name=v
	4:==
	4:NUM,val=0
	4:)
	4:reserved word:return
	4:ID,name=u
	4:;
   5:    else    return gcd(v,u-u/v*v);
	5:reserved word:else
	5:reserved word:return
	5:ID,name=gcd
	5:(
	5:ID,name=v
	5:,
	5:ID,name=u
	5:-
	5:ID,name=u
	5:/ 
	5:ID,name=v
	5:*
	5:ID,name=v
	5:)
	5:;
   6:    /*u-u/v*v==u mod v*/
   7:} 
	7:}
   8:void main(void)
	8:reserved word:void
	8:ID,name=main
	8:(
	8:reserved word:void
	8:)
   9:{
	9:{
  10:    int x;
	10:reserved word:int
	10:ID,name=x
	10:;
  11:    int y;
	11:reserved word:int
	11:ID,name=y
	11:;
  12:    int r;
	12:reserved word:int
	12:ID,name=r
	12:;
  13:    x=input();
	13:ID,name=x
	13:=
	13:ID,name=input
	13:(
	13:)
	13:;
  14:    y=input();
	14:ID,name=y
	14:=
	14:ID,name=input
	14:(
	14:)
	14:;
  15:    r=output(gcd(x,y));
	15:ID,name=r
	15:=
	15:ID,name=output
	15:(
	15:ID,name=gcd
	15:(
	15:ID,name=x
	15:,
	15:ID,name=y
	15:)
	15:)
	15:;
  16:}
	16:}
	17:EOF

Syntax tree:
  Function Declaration: Return Type: [int] Name: gcd 
    Type: [int] Name: u 
    Type: [int] Name: v 
    compound-stmt:
      local-declarations:
      statement-list:
        If
          Op: ==
            Id:v
            const:0
          statement-list:
            return
              Id:u
          else
            statement-list:
              return
                call function:gcd 
                  args-list:
                  Id:v
                  Op: -
                    Id:u
                    Op: *
                      Op: / 
                        Id:u
                        Id:v
                      Id:v
  Function Declaration: Return Type [void] Name: main 
    param-list:
    compound-stmt:
      local-declarations:
      Var Declaration: Name: x Type: [int] 
      Var Declaration: Name: y Type: [int] 
      Var Declaration: Name: r Type: [int] 
      statement-list:
        expression-stmt:
          Assign to:x
            call function:input 
              args-list:
        expression-stmt:
          Assign to:y
            call function:input 
              args-list:
        expression-stmt:
          Assign to:r
            call function:output 
              args-list:
              call function:gcd 
                args-list:
                Id:x
                Id:y
